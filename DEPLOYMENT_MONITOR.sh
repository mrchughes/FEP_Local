#!/bin/bash

echo "üöÄ DEPLOYMENT MONITORING & TESTING SCRIPT"
echo "========================================="
echo ""

echo "üì° Checking GitHub Actions deployment status..."
echo "You can monitor the deployment at:"
echo "https://github.com/mrchughes/cloud-apps-monorepo/actions"
echo ""

echo "‚è±Ô∏è  Deployment typically takes 5-10 minutes for full infrastructure + app deployment"
echo ""

echo "üîç While deployment runs, here's what to expect:"
echo ""
echo "1. CHANGE DETECTION:"
echo "   ‚úÖ mern-app/ changes detected ‚Üí MERN app will deploy"
echo "   - Shared infrastructure may also deploy if needed"
echo ""
echo "2. DEPLOYMENT STAGES:"
echo "   üì¶ Build frontend React application"
echo "   üê≥ Build and push Docker images to ECR"
echo "   üèóÔ∏è  Deploy infrastructure via Terraform"
echo "   üöÄ Deploy containers to ECS/Fargate"
echo "   üåê Configure load balancer and DNS"
echo ""
echo "3. EXPECTED OUTPUTS:"
echo "   - Frontend URL: Will be available after deployment"
echo "   - Backend API: Will be accessible via ALB"
echo "   - Health checks: Should pass for all services"
echo ""

echo "üìã POST-DEPLOYMENT TESTING CHECKLIST:"
echo "====================================="
echo ""
echo "Once deployment completes:"
echo ""
echo "A) OBTAIN DEPLOYMENT URLs:"
echo "   1. Check GitHub Actions output for deployed URLs"
echo "   2. Look for 'Application deployed successfully' message"
echo "   3. Note the ALB DNS name and CloudFront URL"
echo ""
echo "B) VERIFY BASIC FUNCTIONALITY:"
echo "   1. Open the frontend URL"
echo "   2. Register a new test account"
echo "   3. Login and verify dashboard loads"
echo ""
echo "C) RUN CRITICAL FLOW TESTS:"
echo "   1. Navigation: 'Your applications' ‚Üí Dashboard"
echo "   2. Data isolation: Multiple user accounts"
echo "   3. Form completeness: All 9 sections accessible"
echo "   4. Progress persistence: Logout/login cycles"
echo ""
echo "D) PERFORMANCE & RELIABILITY:"
echo "   1. Check page load times"
echo "   2. Verify SSL certificate"
echo "   3. Test responsive design"
echo "   4. Check browser console for errors"
echo ""

echo "üõ†Ô∏è  TROUBLESHOOTING DEPLOYMENT:"
echo "==============================="
echo ""
echo "If deployment fails:"
echo "1. Check GitHub Actions logs for specific errors"
echo "2. Common issues:"
echo "   - AWS credentials/permissions"
echo "   - Resource limits or conflicts"
echo "   - Docker build failures"
echo "   - Terraform state issues"
echo ""
echo "3. Quick fixes:"
echo "   - Re-run the workflow if transient error"
echo "   - Check AWS console for resource states"
echo "   - Verify no naming conflicts exist"
echo ""

echo "‚ö° QUICK DEPLOYMENT STATUS CHECK:"
echo "================================"
echo ""

# Check if we can determine any URLs from existing deployment
echo "Checking for existing deployment information..."

if [ -f "DEPLOYMENT_STATUS.md" ]; then
    echo "Found deployment status file:"
    cat DEPLOYMENT_STATUS.md | head -20
    echo ""
else
    echo "No existing deployment status found - this may be first deployment"
fi

echo "üéØ NEXT STEPS:"
echo "============="
echo ""
echo "1. ‚è≥ Wait for GitHub Actions to complete (check the link above)"
echo "2. üìù Note the deployed URLs from the workflow output"
echo "3. üß™ Run the manual tests from FINAL_MANUAL_VERIFICATION.md on live app"
echo "4. ‚úÖ Verify all critical flows work in production environment"
echo "5. üöÄ If all tests pass, deployment is successful!"
echo ""

echo "üìä Current commit deployed:"
git log --oneline -1
echo ""

echo "‚úÖ Monitoring script complete - Deployment in progress!"
echo "Check GitHub Actions for real-time status updates."
